{
  "setup/ae-title-job-processor.html": {
    "href": "setup/ae-title-job-processor.html",
    "title": "AE Title Job Processor | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "AE Title Job Processor AE Title Job Processor is the default Job Processor used if not specified in the configuration. For example, this job processor can group received instances by Study Instance UID (0020,000D) so that all received instances with the same Study Instance UID are used to trigger the configured Clara Pipeline(s). Configuration AE Title Job Processor allows the following parameters to be customized: priority : The priority of the job to use during creation of the Clara pipeline-job. Allowed values are lower , normal , higher , immediate . Please refer to Clara Platform for additional details on job priorities. timeout : The number of seconds to wait before creating a new Clara pipeline job (minimum 5 seconds). pipeline-* : Any settings that are prefixed with pipeline- tell the job processor that it's a Clara pipeline and a new Clara pipeline job shall be created with the received instance(s). Examples Scenario 1 \"priority: \"normal\", \"timeout\": 60, \"pipeline-lung\": \"8abf244aff7647989d4f6b3987a85759\", \"pipeline-heart\": \"c5f996a71e1d4959bd6a2c8cf7130f88\", \"pipeline-breast\": \"eb48c784ef20425580db7d46a30829b2\" With the settings above, the job processor will wait for 60 seconds before composing three Clara pipeline jobs, one for lung, one for heart, and one for breast. For example, if there are five studies for Patient X, and each of these studies were sent to DICOM Adapter in a separate DICOM association within 60 seconds, then three Clara pipeline jobs are created, each with all five studies. Scenario 2 \"priority\": \"higher\", \"pipeline-breast\": \"8abf244aff7647989d4f6b3987a85759\" In this scenario, the job processor will group received instances with timeout set to 5 seconds. For example, if studies A, B, and C are all sent over in one DICOM association, and no additional instances are sent afterwards, then after five seconds, three breast pipeline jobs are created, one for each study. As another example, there is one study with four instances, and all four instances are sent in a separate association: The 2nd instance is received at T1+4 (where T1 is the time when 1st instance was received); the 3rd is received at T2+3; and the last at T3+1. In this case, one Clara pipeline job will be created with all four instances."
  },
  "setup/schema.html": {
    "href": "setup/schema.html",
    "title": "Configuration Schema | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "Configuration Schema { \"DicomAdapter\": { \"readAeTitlesFromCrd\": false, // indicates whether to read Clara AE Titles, DICOM Sources and DICOM Destinations from Kubernetes CRD. (default: true), \"crdReadIntervals\": 10000, // indicates how often to update AE Titles from Kubernetes CRD in milliseconds. \"dicom\": { \"scp\": { \"port\": 104, // DICOM SCP listening port. (default 104) \"aeTitles\": [ // A list of AE Titles used to accept and associate DICOM instances when `readAeTitlesFromCrd` is set to `false`, { \"name\": \"brain-tumor\", // name of ae title \"aeTitle\": \"Brain-Tumor-AE\", // DICOM AE Title \"overwriteSameInstance\": false, // whether or not to overwrite existing instance with same SOP Instance UID \"ignoredSopClasses\": [], // an array of strings containing SOP Class UIDs that is used to blacklist (ignore and not store) received instances. \"processor\": \"Nvidia.Clara.DicomAdapter.Server.Processors.AeTitleJobProcessor, Nvidia.Clara.DicomAdapter\", // job process to attach to this AE Title (default: Nvidia.Clara.DicomAdapter.Server.Processors.AeTitleJobProcessor, Nvidia.Clara.DicomAdapter) \"processorSettings\": { // settings to be used by the configured Job Processor. Please refer to Job Processors page for additional information. \"timeout\": 5, \"pipeline-brain-tumor\": \"12345\" } }, ], \"maximumNumberOfAssociations\": 100, // maximum number of concurrent associations. (range: 1-1000, default: 1000) \"verification\": { \"enabled\": true, // respond to c-ECHO commands (default: true) \"transferSyntaxes\": [ \"1.2.840.10008.1.2.1\", // Explicit VR Little Endian \"1.2.840.10008.1.2\" , // Implicit VR Little Endian \"1.2.840.10008.1.2.2\", // Explicit VR Big Endian ] } \"log-dimse-datasets\": false, // whether or not to write command and dataset to log (default false) \"reject-unknown-sources\": true, // whether to reject unknown sources not listed in the source section. (default true) \"sources\": [] // a list know know DICOM sources }, \"scu\": { \"ae-title\": \"ClaraSCU\", // AE Title of the SCU service \"log-dimse-datasets\": false, // whether or not to write command and data datasets to the log. \"log-data-pdus\": false, // whether or not to write message to log for each P-Data-TF PDU sent or received \"maximumNumberOfAssociations\": 2, // maximum number of outbound DICOM associations (range: 1-1000, default: 2) } }, \"storage\" : { \"temporary\" : \"/payloads\" // storage path used for storing received instances before uploading to Clara Platform. } }, \"Serilog\": { \"Using\": [ \"Serilog.Sinks.Console\" ], \"MinimumLevel\": \"Information\", // log filter level. (Available optioins: Debug, Information, Warning, Error) \"WriteTo\": [ { \"Name\": \"Console\", \"Args\": { \"theme\": \"Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console\", \"outputTemplate\": \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u4}] [{MachineName}] {SourceContext}[{ThreadId}] {Properties} {Message:l}{NewLine}{Exception}\" } }, { \"Name\": \"File\", \"Args\": { \"path\": \"logs/clara-dicom.log\", \"rollingInterval\": \"Day\", \"rollOnFileSizeLimit\": true, \"outputTemplate\": \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u4}] [{MachineName}] {SourceContext}[{ThreadId}] {Properties} {Message}{NewLine}{Exception}\" } } ], \"Enrich\": [ \"FromLogContext\", \"WithMachineName\", \"WithThreadId\" ] }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\", \"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker\": \"Error\" } }, \"AllowedHosts\": \"*\" } Configuration Validation Clara DICOM Adapter validates all settings during start i[] . Any provided values that are invalid or missing may cause the service to crash. If you are the running DICOM Adapter inside Kubernetes/Helm, you may see the CrashLoopBack error. To review the validation errors, simply run kubectl logs <name-of-dicom-adapter-pod> ."
  },
  "index.html": {
    "href": "index.html",
    "title": "NVIDIA Clara™ DICOM Adapter v | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "NVIDIA Clara™ DICOM Adapter v Introduction Designed for the Clara Deploy SDK , the Clara DICOM Adapter implements the necessary DICOM services for interoperability between Clara and other medical devices. The Clara DICOM Adapter allows you to send/receive DICOM objects using standard DICOM protocols and interpret standard DICOM part-10 formats. Requirements Docker 18.09.2 or higher Helm v2.15.2 Kubernetes v1.15.12 Services Clara DICOM Adapter contains the following services: DICOM SCP Service : For handling incoming DICOM associations; responsible for storing received instances and notifying the Instance Stored Notification Service of each received DICOM instance. DICOM SCU Service : For exporting processed DICOM results to configured DICOM destinations. Instance Stored Notification Service : Designed with .NET Observer Pattern to allow every Job Processor to be notified when a new instance is available. Storage Space Reclaimer Service : Responsible for cleaning up received DICOM instances from temporary storage once they are uploaded to Clara Platform. DICOM SCP Service The DICOM SCP Service accepts standard DICOM C-ECHO and C-STORE commands. Please see the DICOM Interface section for more information. All received instances are saved immediately to the configured temporary storage location ( DicomAdapter>storage>temporary which is mapped to /clara-io/clara-core/payloads/ by default on the host system) and then registered with the Instance Stored Notification Service . Received DICOM instances are stored on disk as-is using the original transfer syntax described in the DICOM Interface section. Users of the Clara Deploy SDK must handle the encoding/decoding of the DICOM files in their container(s). See Third Party Tools for a list of DICOM toolkits available for parsing, encoding, and decoding DICOM files. DICOM SCU Service The DICOM SCU Service , which is part of the Clara DICOM Adapter, queries the Clara Results Service for available tasks using the Clara SCU AET as the agent name ( DicomAdapter>dicom>scu>aeTitle ). Each retrieved task contains a list of DICOM files to be exported to the configured DICOM devices. If more than 50% of the files fails to be exported, the job is marked as failed and reported back to the Results Service --it will be retried up to three times at a later time. Note DICOM instances are sent as-is; no codec conversion is done as part of the SCU process. See the DICOM Interface section for more information. Instance Stored Notification Service The Instance Stored Notification Service is designed to allow Job Processors to subscribe to DICOM Receive & Store events. This allows developers to extend or customize the processing logic without worrying about where and how to store DICOM instances. Note DICOM instances that are not handled by the associated Job Processor are sent to the Storage Space Reclaimer Service immediately for cleanup. Storage Space Reclaimer Service The Storage Space Reclaimer Service is responsible for removing stored DICOM instances from temporary storage after Job Processor has completed submission of a Clara pipeline job. Third Party Tools/DICOM Toolkit fo-dicom .NET dcmtk C++ pydicom Python go-dicom Go"
  },
  "setup/job-processors.html": {
    "href": "setup/job-processors.html",
    "title": "Job Processors | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "Job Processors A Job Processor allows the user to configure how received DICOM instances will be associated with one or more configured Clara pipelines. Each configured Clara SCP AE Title must have one processor configured; if omitted, the default AE Title Job Processor is used. Extending JobProcessorBase By extending JobProcessorBase , which is found in Nvidia.Clara.Dicom.API.dll , developers can customize their inference job submission workflow. The following code snippet contains the properties and methods that are required when implementing a Job Processor. public abstract class JobProcessorBase : IDisposable, IObserver<InstanceStorageInfo> { public abstract string Name { get; } public abstract string AeTitle { get; } public abstract void HandleInstance(InstanceStorageInfo value); } Name : The name for the job processor. AeTitle : The AE Title that the processor is attached to. HandleInstance(...) : Contains a detailed implementation of how a job processor handles received instances. To submit a job in the HandleInstance(...) method, developers can simply call base.SubmitPipelineJob(...) , giving the name of the job, the pipeline ID that has been registered with Clara Platform, the priority, and the DICOM instances to be associated with the job. Once job submission is completed, RemoveInstances(...) should be called with the instances so the DICOM files in the temporary storage can be cleaned up by the Storage Space Reclaimer Service . Example Usage: Cache Service For example, you may extend JobProcessorBase and have HandleInstance(...) build up a internal database and cache the DICOM instances. Then, you can provide an API (gRPC/REST) to compose a new job by specifying the studies to use, submit the job, and then cleanup the instances."
  },
  "setup/setup.html": {
    "href": "setup/setup.html",
    "title": "Setup | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "Setup This section will walk you through setting up Clara DICOM Adapter, using the Clara Deploy AI COVID-19 Classification Pipeline as an example. Install Clara DICOM Adapter Helm Chart To install Clara DICOM Adapter Helm Chart, please follow these steps: If the system doesn't already have Docker and Kubernetes installed, first run the Bootstrap script . Install Clara Deploy CLI . Install Clara DICOM Adapter Helm Chart using the following command: $ clara pull dicom Next, we'll configure Clara DICOM Adapter. Configuring Clara DICOM Adapter The DICOM Adapter configuration is stored as JSON in ~/.clara/charts/dicom-adapter/files/appsettings.json . The default settings enable DICOM C-STORE SCP and C-STORE-SCU and set listening on port 104 . Default Settings (appsettings.json) { \"DicomAdapter\": { \"readAeTitlesFromCrd\": true, \"dicom\": { \"scp\": { \"port\": 104, \"log-dimse-datasets\": false, \"reject-unknown-sources\": true }, \"scu\": { \"ae-title\": \"ClaraSCU\", \"log-dimse-datasets\": false, \"log-data-pdus\": false } }, \"storage\" : { \"temporary\" : \"/payloads\" } }, \"Serilog\": { \"Using\": [ \"Serilog.Sinks.Console\" ], \"MinimumLevel\": \"Information\", \"WriteTo\": [ { \"Name\": \"Console\", \"Args\": { \"theme\": \"Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console\", \"outputTemplate\": \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u4}] [{MachineName}] {SourceContext}[{ThreadId}] {Properties} {Message:l}{NewLine}{Exception}\" } }, { \"Name\": \"File\", \"Args\": { \"path\": \"logs/clara-dicom.log\", \"rollingInterval\": \"Day\", \"rollOnFileSizeLimit\": true, \"outputTemplate\": \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u4}] [{MachineName}] {SourceContext}[{ThreadId}] {Properties} {Message}{NewLine}{Exception}\" } } ], \"Enrich\": [ \"FromLogContext\", \"WithMachineName\", \"WithThreadId\" ] }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\", \"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker\": \"Error\" } }, \"AllowedHosts\": \"*\" } Please refer to Configuration Schema for complete reference. Starting Clara DICOM Adapter Once you have configured Clara DICOM Adapter, run the following command to start the service: clara dicom start Enable Incoming Associations Before setting up a new Clara AE Title , you must first register the COVID-19 pipeline: Refer to the COVID-19 Setup Guide to register the pipeline. Once you have registered the pipeline with Clara Platform and have the Pipeline ID , you can now setup a new Clara AE Title to accept DICOM associations and store DICOM instances. First, create a new Clara AE Title : $ clara dicom create aetitle -a COVIDAET pipeline-covid=<PIPELINE-ID> Note Per the DICOM standard, the length of the ae-Title value should not exceed 16 characters. Next, create a DICOM Source to allow that DICOM device to communicate with DICOM Adapter: $ clara dicom create -a MYPACS -i 10.20.30.1 Now you have a DICOM device with the AE Title MYPACS registered at IP address 10.20.30.1 , and Clara DICOM Adapter will now accept DICOM associations from this device. .. Note:: If you would like DICOM Adapter to accept any incoming DICOM association without verifying the source, you may set DicomAdapter>dicom>scp>reject-unknown-sources to false in the configuration file. Exporting Processed Results If the pipeline (in this case, the COVID-19 pipeline) generates results in DICOM format and needs to export the results back to a DICOM device, e.g. PACS, you will need to create a DICOM destination: $ clara dicom create dest -n MYPACS -a MYPACSAET -i 10.20.30.2 -p 1104 With the command and arguments above, we have created a new DICOM Destination named MYPACS with AE Title MYPACSAET at IP address 10.20.30.2 and port 1104 . Please note that the name argument ( -n ) must match the arguments defined in the pipeline. Please refer to Register Results Operator for a complete reference. Summary With all the steps completed above, Clara DICOM Adapter is now ready to receive DICOM associations with the AE Title COVIDAET . To summarize, you've done the following: Install Clara DICOM Adapter Helm Chart Register COVID-19 pipeline with Clara Setup Clara AE Title to run the COVID-19 pipeline Setup DICOM Source to allow incoming association requests Setup DICOM Destination for exporting processed results Other Settings Helm Chart Storage Configuration The DICOM Adapter helm chart by default creates a persistent volume claim with 50Gi on /clara-io/clara-core/payloads , which is mounted to /payloads inside the DICOM Adapter container. To increase or decrease the size of the volume claim, find and modify the volumeSize property in ~/.clara/charts/dicom-adapter/values.yaml and restart the DICOM Adapter."
  },
  "dicom.html": {
    "href": "dicom.html",
    "title": "DICOM Interface | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "DICOM Interface The following reference describes the connectivity capabilities of Clara Deploy SDK out of the box. Users implementing the Clara Deploy SDK must update their DICOM Conformance Statement according to the actual capabilities of their application. DICOM SCP Clara DICOM SCP implements C-ECHO and C-Store services to interface with other medical devices, such as PACS. It allows users to define multiple AE Titles to enable DICOM communication. It then maps each AE Title to a pipeline. DIMSE Services (SCP) C-STORE : Accepts incoming DICOM objects C-ECHO : Accepts incoming DICOM verification requests SOP Classes (Transfer) and Transfer Syntax Supported Clara DICOM SCP accepts any proposed transfer syntaxes and stores any accepted instances as-is on disk without any decoding support. Each AE Title may be configured to ignore and not save certain SOP Classes. Association Policies Clara DICOM Storage SCP accepts associations but does not initiate associations. Clara DICOM Storage SCP accepts a maximum of 100 (configurable) concurrent associations. Asynchronous mode is not supported. All operations are performed synchronously. The Implementation Class UID is \"1.3.6.1.4.1.30071.8\" and the Implementation Version Name is \"fo-dicom 4.0.0\". An association must be released properly for received instances to be associated with a pipeline. Files received from an aborted association or an interrupted connection are either removed immediately or removed based on a configured timeout value. Security Profiles Clara DICOM Storage SCP does not conform to any defined DICOM Security Profiles. It is assumed that the product is used within a secured environment that uses a firewall, router protection, VPN, and/or other network security provisions. The Clara DICOM Storage SCP service can be configured to check the following DICOM values when determining whether to accept Association Open Requests: Calling AE Title Called AE Title Clara SCP AE Title can be configured to accept Association Requests from only a limited list of Calling AE Titles. DICOM SCU The Clara DICOM Storage SCU provides the DICOM Storage Service for interfacing with other medical devices such as PACS. It is executed at system startup and exists in a container using a single configurable AE Title. DIMSE Services (SCU) C-STORE : Sends processed results that are stored in DICOM format The Clara DICOM Storage SCU initiates a push of DICOM objects to the Remote DICOM Storage SCP. The system allows multiple remote SCPs to be configured. SOP Classes (Transfer) Supported and Transfer Syntax The DICOM Store SCU service supports all SOP classes of the Storage Service Class. The DICOM Store SCU service transfers a DICOM object as-is using the stored Transfer Syntax, without the support of compression, decompression, or Transfer Syntax conversion. Association Policies Clara DICOM Storage SCU initiates associations but does not accept associations. Clara DICOM Storage SCU allows two (configurable) SCU instances simultaneously. Asynchronous mode is not supported. All operations are performed synchronously. The Implementation Class UID is \"1.3.6.1.4.1.30071.8\" and the Implementation Version Name is \"fo-dicom 4.0.0\". Security Profiles Not applicable"
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "Changelog 0.7.0 🆕 new: DICOM Adapter now accepts concurrent associations per AE Title and has a new Job Processor extension, designed to allow developers to extend and customize how received DICOM instances can be associated with a pipeline job. ⚠️ breaking: The YAML-formatted configuration file has been replaced and consolidated into a single appsettings.json file. 0.6.0 🆕 new: configure Clara AE-Title s, *Sources and Destinations via Kubernetes CRD is added which allows user to add a new Clara AE-Title and associate it with a Clara Pipeline without restarting DICOM Adapter. DICOM sources and destination can also be added via CRD. ⛔ removed: timeout-group is no longer supported. This can be replaced by custom plug-in if required. timeout is still supported to accept multiple associations and associate al received DICOM instances with a Clara job."
  },
  "apis.html": {
    "href": "apis.html",
    "title": "REST APIs | NVIDIA Clara&#8482; DICOM Adapter v",
    "keywords": "REST APIs Clara DICOM Adapter supports the following RESTful APIs on (default) port 5000. GET /api/config/claraaetitle GET /api/config/sourceaetitle GET /api/config/destinationaetitle Retrieves list of (Clara|Source|Destination) AE Titles. Parameters N/A Responses Response Content Type: JSON Returns list of AE Titles (in Kubernetes CRD JSON format): Name Type Description apiVersion string CRD apiVersion items crd[] An array of CRDs kind string ClaraAeTitleList, SourceList or DestinationList metadata object A unique ID representing the payload associated with the job where the results are stored Code Description 200 CRDs retrieved successfully . Example Request curl --location --request GET 'http://localhost:5000/api/config/destinationaetitle' POST /api/config/claraaetitle Create a new Clara AE Title. Parameters Required fields listed below. Refer to Schema section for complete list. Name Type Description name string Name of the CRD aeTitle string Clara AE Title overwriteSameInstance bool Overwrite existing instance with same SOP Instance UID (default: false) ignoredSopClasses string[] An array of strings containing SOP Class UIDs that is used to add received instances to the denylist (ignore and not store). processor string Job processor associated with the AE Title. (default: \"Nvidia.Clara.DicomAdapter.Server.Processors.AeTitleJobProcessor, Nvidia.Clara.DicomAdapter\") processorSettings JSON object A JSON object containing key/value pairs of settings to be used for the Job Processor Responses Response Content Type: JSON Returns created CRD formatted in JSON. Name Type Description apiVersion string CRD apiVersion kind string ClaraAeTitle spec Clara AET Clara AE Title specs Code Description 200 CRD created successfully . 400 CRD already exists or invalid. Example Request curl --location --request POST 'http://localhost:5000/api/config/ClaraAeTitle/' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\": \"brain-tummor\", \"aeTitle\": \"BrainTumorModel\", \"overwriteSameInstance\": true, \"ignoredSopClasses\": [ \"1.2.840.10008.5.1.4.1.1.7\" ], \"processorSettings\": { \"timeout\": 5, \"priority\": \"higher\", \"pipeline-brain-tumor\": \"7b9cda79ed834fdc87cd4169216c4011\" } }' POST /api/config/sourceaetitle Create a new Source AE Title. Parameters Required fields listed below. Refer to Schema section for complete list. Name Type Description hostIp string Host name or IP address of DICOM source aeTitle string AE Title of DICOM source Responses Response Content Type: JSON Returns created CRD formatted in JSON. Name Type Description apiVersion string CRD apiVersion kind string Source spec Clara AET Clara AE Title specs Code Description 200 CRDs created successfully . 400 CRDs already exists or invalid. Example Request curl --location --request POST 'http://localhost:5000/api/config/sourceaetitle' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"hostIp\": \"1.2.3.4\", \"aeTitle\": \"Orthanc\" }' POST /api/config/destinationaetitle Create a new Destination AE Title. Parameters Required fields listed below. Refer to Schema section for complete list. Name Type Description name string Name of DICOM instance that can be referenced by Results Service hostIp string Host name or IP address of DICOM destination aeTitle string AE Title of DICOM destination port int Port of DICOM destination Responses Response Content Type: JSON Returns created CRD formatted in JSON. Name Type Description apiVersion string CRD apiVersion kind string Destination spec Clara AET Clara AE Title specs Code Description 200 CRDs created successfully . 400 CRDs already exists or invalid. Example Request curl --location --request POST 'http://localhost:5000config/destinationaetitle' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\":\"pacs\", \"hostIp\": \"10.20.30.40\", \"aeTitle\": \"ARCHIVEX\", \"port\": 104 }' DELETE /api/config/claraaetitle/[name] DELETE /api/config/sourceaetitle/[name] DELETE /api/config/destinationaetitle/[name] Deletes a (Clara|Source|Destination) AE Title. Parameters Name Type Description name string name of the Kubernetes custom resource. Note: name can be found in the metadata section of a CRD. Responses Response Content Type: JSON Returns status of the deleted CRD. Name Type Description apiVersion string v1 status string Status of the call. kind string Status Code Description 200 CRDs retrieved successfully . Example Request curl --location --request DELETE 'http://localhost:5000/api/config/claraaetitle/clara-brain-tumor' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\": \"clara-brain-tumor1\", \"pipelineId\": \"7b9cda79ed834fdc87cd4169216c4011\", \"aeTitle\": \"BrainTumor1\", \"timeout\": 0 }'"
  }
}